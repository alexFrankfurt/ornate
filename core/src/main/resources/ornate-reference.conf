# Settings which are only accessed globally (overriding on a per-page basis has no effect)
#--doc-global
global {
  # Directory containing the document sources
  sourceDir = "src"
  # Directory containing static resources that should be copied to the target site
  resourceDir = ${global.sourceDir}
  # List of gitignore-style patterns (relative to global.resourcedir) matching
  # resources that should not be copied
  excludeResources = ["*.md", ".DS_Store", "Thumbs.db", "*~"]
  # Directory to which the output is rendered
  targetDir = "target"
  # TOC structure or null for no TOC
  toc = null
#--doc-global
  # Maximum header level to show in the TOC
  tocMaxLevel = 7
  # Merge page and first heading in the TOC (omit page entry, but make first heading link to page)
  tocMergeFirst = true
  # Short names for extensions
  extensionAliases = {
    #--doc-extension-aliases
    autolink             = org.commonmark.ext.autolink.AutolinkExtension
    strikethrough        = org.commonmark.ext.gfm.strikethrough.StrikethroughExtension
    tables               = org.commonmark.ext.gfm.tables.TablesExtension
    headerAttributes     = com.novocode.ornate.commonmark.HeaderAttributesExtension
    blockQuoteAttributes = com.novocode.ornate.commonmark.BlockQuoteAttributesExtension
    autoIdentifiers      = com.novocode.ornate.commonmark.AutoIdentifiersExtension
    mergeTabs            = com.novocode.ornate.commonmark.MergeTabsExtension
    includeCode          = com.novocode.ornate.IncludeCodeExtension
    expandVars           = com.novocode.ornate.ExpandVarsExtension
    emoji                = com.novocode.ornate.EmojiExtension
    globalRefs           = com.novocode.ornate.GlobalRefsExtension
    #--doc-extension-aliases
  }
  # Short names for themes
  themeAliases = {
    default              = com.novocode.ornate.theme.default.html.Theme
    dump                 = com.novocode.ornate.theme.Dump
  }
  # Short names for syntax highlighters
  highlightAliases = {
    highlightjs          = com.novocode.ornate.highlight.HighlightJSHighlighter
    no                   = com.novocode.ornate.highlight.NoHighlighter
  }
#--doc-global
  # The theme, which also determines the output format
  theme = default
  # The syntax highlighter
  highlight = highlightjs
}
#--doc-global

#--doc-extensions
# Extensions (alias or class name) to use on the page
extensions = [
  headerAttributes
  blockQuoteAttributes
  #autolink
  strikethrough
  tables
  autoIdentifiers
  includeCode
  expandVars
  mergeTabs
  emoji
  globalRefs
]
#--doc-extensions

# Page meta-data
meta {
  # Site title
  siteTitle = "Generated Site"
  # Language code, for example "eng" or "eng-US"
  lang = eng
  # Rendering direction ("ltr" or "rtl")
  dir = ltr
  # Copyright notice
  copyright = ""
}

# The rest of this file contains configurations for configurable objects. These are rooted at $kind.$name
# where kinds include "theme", "extension" and "highlight", and the name is either an alias or a fully
# qualified class name (only if no alias for that class is defined).

# Emoji format (svg, png, png_128x128, png_512x512, unicode)
extension.emoji.global.format = svg

#--doc-expandVars
extension.expandVars {
  # Start and end delimiter for variable substitution:
  startDelimiter = "{{"
  endDelimiter   = "}}"
  # Whether to expand variables globally in different node types:
  text              = false // in plain text content
  code              = false // in inline code
  indentedCodeBlock = false // in indented code blocks
  fencedCodeBlock   = false // in fenced code blocks
                            // (can be overridden with expandVars=true|false attribute)
}
#--doc-expandVars

#--doc-globalRefs
extension.globalRefs {
  # A map of reference labels to targets
  refs = {}
}
#--doc-globalRefs

# Theme-specific settings for the default theme.
#--doc-theme
theme.default {
  # Settings which are only accessed globally
  global {
    # Synthetic pages to be generated without matching source files.
    # Source URI (relative to site:/), or null to omit a page.
    pages {
      toc = "contents.md"
      search = "site-search.md"
    }
    # Directories (as URIs relative to site:/) where the theme places resources
    dirs = {
      css   = "_theme/css"
      js    = "_theme/js"
      image = "_theme/images"
    }
    # If set to a file name like "index.html", generated links to this name will
    # go to the directory instead
    indexPage = null
    # Search index file that is generated if theme.default.global.pages.search
    # is defined (URI relative to site:/, or null to disable the search index)
    searchIndex = "search-index.js"
    # List of gitignore-style patterns matching page URIs (relative to site:/)
    # to exclude from the search index
    searchExcludePages = [ ${theme.default.global.pages.search} ]
    # Number of characters per page to use for excerpts in search results
    # (0 to disable excerpts)
    searchExcerptLength = 200
    # Front matter for the generated search page
    searchPageConfig {
      theme.default.template: search
      theme.default.pageNav: false
    }
    minify {
      # Minify CSS files with CSSO
      css = false
    }
  }
  # English-language default strings, referenced from theme.default.strings.
  # Strings are usually parsed as Markdown in the context of the surrounding page.
  en {
    siteNav = null
    pageNav = "On This Page"
    headerLeft = ${meta.siteTitle}
    headerRight = null
    footerLeft = ${meta.copyright}
    footerRight = "Generated with [Ornate](https://github.com/szeiger/ornate)."
    tocPage = "# Table of Contents\n\n![](toctree:)"
    searchPlaceholder = "Search"
    searchPage = "# Search\n\nFrom here you can search all pages. Enter the search terms below and click the search button. Note that the search function will search for a combination of *all* search terms."
    noScript = "> {.warning}\n> This feature requires JavaScript. Please enable JavaScript in your browser."
    # The searchCount strings are plain text only:
    searchCount0 = "No matching pages found."
    searchCount1 = "Found one matching page:"
    searchCountN = "Found # matching pages:"
  }
  # Localized strings
  strings = ${theme.default.en}
  # Type of the site navigation on the left side ("toctree:" URI or null)
  siteNav = "toctree:maxLevel=1"
  # Show page navigation on the right side (true or false, or null to enable
  # automatically when the page has more than one section)
  pageNav = null
  # The template that is used to render pages
  template = default
}
#--doc-theme

# Settings for the highlight.js-based syntax highlighter
#--doc-highlightjs
highlight.highlightjs {
  # Preloaded languages. Any language that you want to access via an alias
  # should be listed here.
  preload = [scala, java, json, yaml, sql, ini, diff, bash, xml, markdown]

  # Default language when none is specified. Can be one of the supported languages,
  # an array of languages from which to pick automatically, or null or an empty list
  # for plain text. There are separate defaults for fenced code blocks, indented
  # code blocks and inline code.
  fenced    = ${highlight.highlightjs.preload}
  indented  = ${highlight.highlightjs.preload}
  inline    = null

  # URIs of CSS files and assorted resources required for the style
  # (relative to webjar:/highlight.js/styles/)
  styleResources = [ github-gist.css ]
}
#--doc-highlightjs
