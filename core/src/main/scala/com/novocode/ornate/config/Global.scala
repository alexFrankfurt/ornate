package com.novocode.ornate.config

import java.net.{URLEncoder, URI}

import com.novocode.ornate.highlight.{NoHighlighter, Highlighter}
import com.novocode.ornate._
import com.novocode.ornate.theme.Theme
import org.commonmark.html.HtmlRenderer.HtmlRendererExtension
import org.commonmark.parser.Parser.ParserExtension
import org.webjars.WebJarAssetLocator

import scala.collection.JavaConverters._
import better.files._
import com.typesafe.config.{ConfigValue, ConfigFactory, Config}

import scala.collection.mutable
import scala.collection.mutable.ListBuffer

class Global(startDir: File, confFile: File, overrides: Config = ConfigFactory.empty()) extends Logging {
  val (referenceConfig: ReferenceConfig, userConfig: UserConfig) = {
    val ref = ConfigFactory.parseResources(getClass, "/ornate-reference.conf")
    val refC = new ReferenceConfig(ref.resolve(), this)
    if(confFile.exists) {
      val c = ConfigFactory.parseFile(confFile.toJava)
      logger.info(s"Using configuration file $confFile")
      (refC, new UserConfig(overrides.withFallback(c).withFallback(ref).resolve(), startDir, this))
    } else {
      logger.info(s"Configuration file $confFile not found, using defaults from ornate-reference.conf")
      (refC, new UserConfig(overrides.withFallback(ref).resolve(), startDir, this))
    }
  }

  logger.debug("Source dir is: " + userConfig.sourceDir)
  logger.debug("Target dir is: " + userConfig.targetDir)

  private val cachedExtensions = new mutable.HashMap[String, Option[AnyRef]]
  private[config] def getCachedExtensionObject(co: ConfiguredObject): Option[AnyRef] = cachedExtensions.getOrElseUpdate(co.className, {
    try {
      val cls = Class.forName(co.className)
      if(classOf[Extension].isAssignableFrom(cls)) {
        try {
          val cons = cls.getConstructor(classOf[ConfiguredObject])
          Some(cons.newInstance(co).asInstanceOf[Extension])
        } catch { case _: NoSuchMethodException =>
          Some(cls.newInstance().asInstanceOf[Extension])
        }
      } else // CommonMark extension
        Some(cls.getMethod("create").invoke(null))
    } catch { case ex: Exception =>
      logger.error(s"Error instantiating extension class ${co.className} -- disabling extension", ex)
      None
    }
  })

  lazy val theme: Theme = {
    val cl = userConfig.theme.className
    logger.debug(s"Creating theme from class $cl")
    Class.forName(cl).getConstructor(classOf[Global]).newInstance(this).asInstanceOf[Theme]
  }

  lazy val highlighter: Highlighter = {
    val cl = userConfig.highlight.className
    logger.debug(s"Creating highlighter from class $cl")
    try Class.forName(cl).getConstructor(classOf[Global], classOf[ConfiguredObject]).newInstance(this, userConfig.highlight).asInstanceOf[Highlighter]
    catch { case ex: Exception =>
      logger.error(s"Error instantiating highlighter class $cl -- disabling highlighting", ex)
      new NoHighlighter(this, null)
    }
  }

  /** Find all sources in global.sourceDir as (file, suffix, uri) */
  def findSources: Vector[(File, String, URI)] = {
    val dir = userConfig.sourceDir
    val suffix = ".md"
    dir.collectChildren(f => f.isRegularFile && f.name.endsWith(suffix)).map { f =>
      (f, suffix, Util.sourceFileURI(dir, f))
    }.toVector
  }

  def findStaticResources: Vector[(File, URI)] = {
    val dir = userConfig.resourceDir
    userConfig.excludeResources.filter(dir).collect {
      case f if f.isRegularFile => (f, Util.sourceFileURI(dir, f))
    }
  }
}

/** Reference configuration, used for extra pages generated by themes */
class ReferenceConfig(val raw: Config, global: Global) {
  def getExtensions(names: Iterable[String]): Extensions = {
    val normalized = objectKind("extension").normalizeAndCreate(names)
    new Extensions(normalized.map(co => (co, global.getCachedExtensionObject(co))))
  }

  def parsePageConfig(hocon: String): Config =
    ConfigFactory.parseString(hocon).withFallback(raw).resolve()

  private[this] val cachedObjectKinds = new mutable.HashMap[String, ConfiguredObjectKind]

  def objectKind(prefix: String): ConfiguredObjectKind =
    cachedObjectKinds.getOrElseUpdate(prefix, {
      val m = raw.getObject(s"global.${prefix}Aliases").unwrapped().asScala.toMap.mapValues(_.toString)
      new ConfiguredObjectKind(prefix, m, raw, global)
    })
}

/** User configuration */
class UserConfig(raw: Config, startDir: File, global: Global) extends ReferenceConfig(raw, global) {
  val sourceDir: File = startDir / raw.getString("global.sourceDir")
  val targetDir: File = startDir / raw.getString("global.targetDir")
  val resourceDir: File = startDir / raw.getString("global.resourceDir")
  val tocMaxLevel: Int = raw.getInt("global.tocMaxLevel")
  val tocMergeFirst: Boolean = raw.getBoolean("global.tocMergeFirst")
  val excludeResources: FileMatcher = new FileMatcher(raw.getStringList("global.excludeResources").asScala.toVector)

  val theme = objectKind("theme").singleton
  val highlight = objectKind("highlight").singleton

  val toc: Option[Vector[ConfigValue]] =
    if(raw.hasPath("global.toc")) Some(raw.getList("global.toc").asScala.toVector)
    else None
}

class ConfiguredObject(val prefix: String, val name: String, val className: String, rootConfig: Config, val global: Global) {
  def getConfig(pageConfig: Config): Config = {
    val n = s"$prefix.$name"
    if(pageConfig.hasPath(n)) pageConfig.getConfig(n) else ConfigFactory.empty()
  }
  lazy val config: Config = getConfig(rootConfig)
}

class ConfiguredObjectKind(val prefix: String, aliases: Map[String, String], rootConfig: Config, global: Global) {
  private[this] lazy val reverse = aliases.map { case (a, c) => (c, a) }

  def dealias(cls: String): String = aliases.getOrElse(cls, cls)
  def alias(alias: String): String = reverse.getOrElse(alias, alias)

  def create(alias: String): ConfiguredObject =
    new ConfiguredObject(prefix, alias, dealias(alias), rootConfig, global)

  lazy val singleton: ConfiguredObject = create(rootConfig.getString(s"global.$prefix"))

  def normalizeAndCreate(names: Iterable[String]): Vector[ConfiguredObject] = {
    val b = new mutable.ListBuffer[String]
    names.foreach { s =>
      if(s.startsWith("-")) b -= dealias(s.substring(1))
      else b += dealias(s)
    }
    b.map(cls => new ConfiguredObject(prefix, alias(cls), cls, rootConfig, global)).toVector
  }
}
